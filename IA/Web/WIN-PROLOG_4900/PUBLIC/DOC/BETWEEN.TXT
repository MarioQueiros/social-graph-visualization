BETWEEN

%   Authors : R.A.O'Keefe, Ken Johnson
%   Purpose: Generate integers.

________________________________________________________________________

between/3

check or generate integers between two bounds

			between(Lower, Upper, Integer) 

		is strictly equivalent to
	
			integer_bound(Lower, Integer, Upper).

________________________________________________________________________

gen_arg/3

get or generate arguments of a term

	gen_arg(Position, Term, Argument)

	?Position	<integer> or <variable>
	+Term		<term>
	?Argument	<term> or <variable>

	gen_arg(N, Term, Arg)
	is exactly like arg(N, Term, Arg), except that it will generate
	solutions for N by backtracking (will work when N is a variable).


	Example

		| ?- bagof((Position,Argument), 
			   gen_arg(Position, a(b,c,d,e), Argument), 
			   B).
		Position = _ ,
		Argument = _ ,
		B = [(1,b),(2,c),(3,d),(4,e)]

________________________________________________________________________

gen_int/1

check or generate integers

	gen_int(Int)

	?Int		<integer> or <variable>

	If Int is instantiated gen_int(Int) just checks whether Int
	is an integer.
	If Int is not instantiated gen_int(Int) generates through
	backtracking the integers in the order 0, +1, -1, +2, -2, ...
	

	Examples

		?- gen_int(5).
		yes

		?- gen_int(-5).
		yes

		| ?- gen_int(I).
		I = 0 ;

		I = 1 ;

		I = -1 ;

		I = 2 ;

		I = -2 ;

		...


________________________________________________________________________

gen_nat/1

check or generate natural numbers starting from 0

	gen_nat(Nat)

	?Nat		<integer> or <variable>

	If Nat is instantiated gen_nat(Nat) just checks whether Nat
	is a natural number.
	If Nat is not instantiated gen_nat(Nat) generates the natural
	numbers starting from 0 through backtracking.

	Examples

		?- gen_nat(5).
		yes

		?- gen_nat(-5).
		no

		?- gen_nat(N).
		N = 0 ;

		N = 1 ;

		N = 2 ;

		N = 3 ;

		N = 4 ;

		...


________________________________________________________________________

gen_nat/2

check or generate natural numbers starting from a given natural number

	gen_nat(Start, Nat)

	?Start		<integer> or <variable>
	?Nat		<integer> or <variable>

	If both Start and Nat are instantiated, gen_nat(Start, Nat)
	checks whether Nat >= Start.

	If Start is instantiated and Nat is not instantiated,
	gen_nat(Start, Nat) generates the natural numbers through
	backtracking and starting from Start.

	If Start is not instantiated and Nat is instantiated,
	gen_nat(Start, Nat) succeeds with Start = Nat.

	Examples

		?- gen_nat(5, N).
		N = 5 ;

		N = 6 ;

		N = 7 ;

		...

		?- gen_nat(5, 8).
		yes

		?- gen_nat(5, 2).
		no

		?- gen_nat(S, 5).
		S = 5 ;

		no

