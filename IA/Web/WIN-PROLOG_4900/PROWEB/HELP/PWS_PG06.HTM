<HTML>
<HEAD>
<TITLE>ProWeb Server - Reference Manual - ProWeb Exports</TITLE>
</HEAD>
<BODY BACKGROUND="lpa_line.gif" BGCOLOR="#C0C0C0" TEXT="#000080" LINK="#0000FF" VLINK="#00FF00" ALINK="#FF0000">
<TABLE COLS=2>
<TD VALIGN=TOP ALIGN=CENTER>
<IMG SRC="lpa_left.gif">
</TD><TD VALIGN=TOP ALIGN=LEFT><IMG SRC="pws.gif"><P>

<H1>Reference Manual - ProWeb Exports</H1>

The following list represents the predicates exported by ProWeb.
Some are intended to control a user's application (for example
<B>proweb_setting/2</B>) whereas others will be embedded within the
application code (for example <B>proweb_send_form/2</B>).

<UL><FONT FACE=courier COLOR=800000 SIZE=3>
  <LI><A HREF="#PG0601">proweb_string            / 2</A>
  <LI><A HREF="#PG0602">proweb_setting           / 2</A>
  <LI><A HREF="#PG0603">proweb_home_page         / 2</A>
  <LI><A HREF="#PG0604">proweb_send_form         / 1</A>
  <LI><A HREF="#PG0619">proweb_send_unique_form  / 1</A>
  <LI><A HREF="#PG0605">proweb_resend_form       / 1</A>
  <LI><A HREF="#PG0606">proweb_returned_form     / 1</A>
  <LI><A HREF="#PG0607">proweb_unreturned_form   / 1</A>
  <LI><A HREF="#PG0608">proweb_preset_answer     / 2</A>
  <LI><A HREF="#PG0609">proweb_returned_answer   / 2</A>
  <LI><A HREF="#PG0610">proweb_post_reply        / 2</A>
  <LI><A HREF="#PG0611">proweb_post_unique_reply / 2</A>
  <LI><A HREF="#PG0612">proweb_posted_reply      / 2</A>
  <LI><A HREF="#PG0613">proweb_dynamic           / 1</A>
  <LI><A HREF="#PG0614">proweb_asserta           / 1</A>
  <LI><A HREF="#PG0615">proweb_assertz           / 1</A>
  <LI><A HREF="#PG0616">proweb_retract           / 1</A>
  <LI><A HREF="#PG0617">proweb_retractall        / 1</A>
  <LI><A HREF="#PG0618">proweb_call              / 1</A>
</FONT></UL>
<BR><BR><BR><BR>
<A NAME="PG0601">
<H3>Exported Predicate : proweb_string / 2</H3>
</A NAME="PG0601">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_string( ?Category, ?String )                                %
%                                                                    %
%	Category	ATOM   		A ProWeb string category     %
%                                                                    %
%	String		STRING		The string itself            %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

The valid categories are :-
<UL><DL>
  <DT><LI><B>title</B>
    <DD>The title string `ProWeb Server`
  <DT><LI><B>version</B>
    <DD>The ProWeb version string (e.g. `Version 0.30`)
  <DT><LI><B>build</B>
    <DD>The ProWeb build string (e.g. `Build 23 OCT 96`)
  <DT><LI><B>copyright</B>
    <DD>The ProWeb copyright string `Copyright 1996 - Logic Programming Associates`
</DL></UL>
<BR><BR><BR><BR>
<A NAME="PG0602">
<H3>Exported Predicate : proweb_setting / 2</H3>
</A NAME="PG0602">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_setting( ?Setting, ?Value )                                 %
%                                                                    %
%	Setting		ATOM		A valid ProWeb setting       %
%                                                                    %
%	Value		TERM		A valid setting value        %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Get or set a global configuration setting.
<P>

<TABLE BORDER=1 CELLPADDING=4 CELLSPACING=4>
  <TR>
    <TH> Setting     </TH>
    <TH> Type        </TH>
    <TH> Default     </TH>
    <TH> Description </TH>
  </TR>
  <TR>
    <TD> <A NAME="SETTING01"> main_goal </A> </TD>
    <TD> atom </TD>
    <TD> true </TD>
    <TD> Names the predicate which constitutes the main goal of the user's ProWeb application. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING02"> post_goal </A> </TD>
    <TD> atom </TD>
    <TD> true </TD>
    <TD> Names the predicate which constitutes the post goal after termination of the main goal. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING03"> max_forms_per_page </A> </TD>
    <TD> integer >= 0 </TD>
    <TD> 0 </TD>
    <TD> Governs the number of forms travelling in a single page from SERVER to CLIENT. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING04"> help </A> </TD>
    <TD> on / off </TD>
    <TD> off </TD>
    <TD> Attach in-line help buttons to HTML questions. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING05"> cache_help </A> </TD>
    <TD> on / off </TD>
    <TD> off </TD>
    <TD> Allow the cacheing of help texts. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING06"> cache_include </A> </TD>
    <TD> on / off </TD>
    <TD> off </TD>
    <TD> Allow the cacheing of included template HTML documents. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING07"> conversation_source </A> </TD>
    <TD> server / client </TD>
    <TD> server </TD>
    <TD> Determines whether the conversational database is stored on the <B>server</B> or <B>client</B> machine. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING08"> conversation_folder </A> </TD>
    <TD> atom </TD>
    <TD> '' </TD>
    <TD> Specifies the local root directory where conversational databases are kept. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING09"> server_time_out </A> </TD>
    <TD> integer > 0 </TD>
    <TD> 60 </TD>
    <TD> Imposes the maximum time allowed (seconds) to execute the main goal. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING10"> client_time_out</A> </TD>
    <TD> integer > 0 </TD>
    <TD> 216000 </TD>
    <TD> Imposes the maximum time allowed (seconds) for the CLIENT to respond to the SERVER. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING11"> dotexe_time_out</A> </TD>
    <TD> integer > 0 </TD>
    <TD> 3600 </TD>
    <TD> Imposes the maximum time allowed (seconds) for the executable to remain idle. </TD>
  </TR>
  <TR>
    <TD> <A NAME="SETTING12"> url</A> </TD>
    <TD> atom </TD>
    <TD> '' </TD>
    <TD> Specifies the name of the URL executable file. </TD>
  </TR>
</TABLE>
<BR><BR><BR><BR>
<A NAME="PG0603">
<H3>Exported Predicate : proweb_home_page / 2</H3>
</A NAME="PG0603">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_home_page( +File, +Mode )                                   %
%                                                                    %
%       File            ATOM            Name of the "Home Page" file %
%                                                                    %
%       Mode            ATOM            Either test or live          %
%                                                                    %
% Generate a "Home Page" for the ProWeb application.                 %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Generate a "Home Page" according to the definition of the special 
form name <B>proweb_home_form</B>. The <I>Mode</I> parameter determines
whether the generated HTML document is to be used during the 
development of the application (<B>test</B>) or represents the 
gateway to the deployed application (<B>live</B>).
<BR><BR><BR><BR>
<A NAME="PG0604">
<H3>Exported Predicate : proweb_send_form / 1</H3>
</A NAME="PG0604">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_send_form( +Form )                                          %
%                                                                    %
% 	Form		TERM		User-defined ProWeb form     %
%                                                                    %
% Called within the user's SERVER program prior to the information   %
% contained in the form being required.  The form is only sent if    %
% it has not been sent before!                                       %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

The conversation between SERVER and CLIENT consists of HTML pages, which
themselves are constructed from forms.  This predicate is embedded within
the ProWeb application prior to the information contained in the form
being required.
<P>
If a form has previously been sent during the conversation between SERVER and
CLIENT then the call to <B>proweb_send_form/1</B> always succeeds without any
effect whatsoever.
<P>
Depending upon the setting <A HREF="#SETTING03">max_forms_per_page</A>
either a single form or multiple forms are sent.  The predicate always succeeds
and execution continues until either the maximum number of forms is
reached or the ProWeb application terminates.
<P>
For example, if <I>Property</I> is instantiated to the value 24 in the
following definition :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
insure_property( Property ) :-
	Reply = insured_premium(Insured,Property),
	proweb_send_form( property_address(      Property ) ),
	proweb_send_form( property_sums_insured( Property ) ),
	proweb_send_form( property_perils(       Property ) ),
	proweb_send_form( property_protections(  Property ) ),
	proweb_returned_form( property_protections( Property ) ),
	forall(
	        sum_insured( Insured, _ ),
	        (
	           calculate_premium( Insured, Property, Premium ),
	           proweb_post_reply( Reply, Premium )
	        )
	      ),
	proweb_send_form( property_premiums(     Property ) ).
</PRE></FONT>

then ProWeb will send forms :-
<OL>
  <LI><I>property_address( 24 )</I>
  <LI><I>property_sums_insured( 24 )</I>
  <LI><I>property_perils( 24 )</I>
  <LI><I>property_protections( 24 )</I>
  <LI><I>property_premiums( 24 )</I>
</OL>
The first 4 forms will either be sent separately (maximum forms = 1),
in batches (maximum forms between 2 and 3), all together (maximum forms at
least 4) or in friendly groups (maximum forms = 0).
<P>
Note, however, that the 5th form in the sequence (<I>property_premiums</I>)
will always be sent in a separate page because of the preceeding
call to <B>proweb_returned_form/1</B>.
<BR><BR><BR><BR>
<A NAME="PG0604">
<H3>Exported Predicate : proweb_send_unique_form / 1</H3>
</A NAME="PG0604">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_send_unique_form( +Form )                                   %
%                                                                    %
% 	Form		TERM		User-defined ProWeb form     %
%                                                                    %
% Called within the user's SERVER program prior to the information   %
% contained in the form being required.  The form is only sent if    %
% it has not been sent before, but unlike proweb_send_form/1 it      %
% fails if it has been sent before!                                  %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

The conversation between SERVER and CLIENT consists of HTML pages, which
themselves are constructed from forms.  This predicate is embedded within
the ProWeb application prior to the information contained in the form
being required.
<P>
If a form has previously been sent during the conversation between SERVER and
CLIENT then the call to <B>proweb_send_form/1</B> fails.
<P>
Depending upon the setting <A HREF="#SETTING03">max_forms_per_page</A>
either a single form or multiple forms are sent.
<P>
The predicate will succeed if the form has not been previously sent
and will fail if it has been previously sent.
<P>
For example, in the following program :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
network :-

        % Ask the start and finish nodes

        proweb_send_form( network_entry ),
	proweb_returned_answer( network_node(start),  Start  ),
	proweb_returned_answer( network_node(finish), Finish ),
	
	% Compute the next path
	network_path( Start, Finish, Path ),
	
        % Tell the client the next path found
        proweb_send_unique_form( network_path(Path) ).
</PRE></FONT>

the same <I>Path</I> will not be sent twice.
<BR><BR><BR><BR>
<A NAME="PG0605">
<H3>Exported Predicate : proweb_resend_form / 1</H3>
</A NAME="PG0605">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_resend_form( +Form )                                        %
%                                                                    %
% 	Form		TERM		User-defined ProWeb form     %
%                                                                    %
% Called within the user's SERVER program prior to the information   %
% contained in the form being required.  The form is sent            %
% irrespective of whether it has been sent before!                   %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

This predicate behaves in much the same way as <B>proweb_send_form/1</B>
except in one respect.  Whether or not the form has previously been sent
it will be added to the list of forms sent to the CLIENT in the next
HTML page.
<P>
For example, in the program :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
member :-
        solution(
                  member( X, [a,b,a,c] ),
                  Solution
                ),
	proweb_post_unique_reply( solution, Solution ),
	proweb_post_reply( answer, X ),
	proweb_resend_form( solution_form ).
</PRE></FONT>

the form <I>solution_form</I> will be repeatedly sent to the CLIENT, once
for each solution.
<BR><BR><BR><BR>
<A NAME="PG0606">
<H3>Exported Predicate : proweb_returned_form / 1</H3>
</A NAME="PG0606">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_returned_form( +Form )                                      %
%                                                                    %
% 	Form		TERM		User-defined ProWeb form     %
%                                                                    %
% Called within the user's SERVER program to test whether or not     %
% the form has been returned.                                        %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Test whether the form has been sent to the CLIENT and the answers returned.
<P>
For example, in the program :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
insure_property( Property ) :-
	Reply = insured_premium(Insured,Property),
	proweb_send_form( property_address(      Property ) ),
	proweb_send_form( property_sums_insured( Property ) ),
	proweb_send_form( property_perils(       Property ) ),
	proweb_send_form( property_protections(  Property ) ),
	proweb_returned_form( property_protections( Property ) ),
	forall(
	        sum_insured( Insured, _ ),
	        (
	           calculate_premium( Insured, Property, Premium ),
	           proweb_post_reply( Reply, Premium )
	        )
	      ),
	proweb_send_form( property_premiums(     Property ) ).
</PRE></FONT>

the call to <B>proweb_returned_form/1</B> is used to separate the request
for information (<I>property_address</I>, <I>property_sums_insured</I> etc.) from the posting of
results (<I>property_premiums</I>).
<BR><BR><BR><BR>
<A NAME="PG0607">
<H3>Exported Predicate : proweb_unreturned_form / 1</H3>
</A NAME="PG0607">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_unreturned_form( +Form )                                    %
%                                                                    %
% 	Form		TERM		User-defined ProWeb form     %
%                                                                    %
% Called within the user's SERVER program to test whether or not     %
% the form has been sent but not yet returned.                       %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Test whether the form has not yet been returned from the CLIENT.
<P>
For example, in the program :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
insure_property( Property ) :-
	proweb_unreturned_form( property_protections( Property ) ),
	!.

insure_property( Property ) :-
	Reply = insured_premium(Insured,Property),
	proweb_send_form( property_address(      Property ) ),
	proweb_send_form( property_sums_insured( Property ) ),
	proweb_send_form( property_perils(       Property ) ),
	proweb_send_form( property_protections(  Property ) ),
	forall(
	        sum_insured( Insured, _ ),
	        (
	           calculate_premium( Insured, Property, Premium ),
	           proweb_post_reply( Reply, Premium )
	        )
	      ),
	proweb_send_form( property_premiums(     Property ) ).
</PRE></FONT>

the call to <B>proweb_unreturned_form/1</B> is used as a special case
for insuring a property.
<BR><BR><BR><BR>
<A NAME="PG0608">
<H3>Exported Predicate : proweb_preset_answer / 2</H3>
</A NAME="PG0608">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_preset_answer( +Question, +Answer )                         %
%                                                                    %
%	Question	TERM		A question which appears in  %
%					a previously sent form       %
%                                                                    %
%	Answer		TERM		The answer given for that    %
%					particular question          %
%                                                                    %
% Preset the answer to a question which has not yet been returned    %
% by the CLIENT.                                                     %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Preset the answer to a question which has not yet been returned by the
CLIENT. This allows processing to continue using default answers.
<BR><BR><BR><BR>
<A NAME="PG0609">
<H3>Exported Predicate : proweb_returned_answer / 2</H3>
</A NAME="PG0609">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_returned_answer( +Question, ?Answer )                       %
%                                                                    %
%	Question	TERM		A question which appears in  %
%					a previously sent form       %
%                                                                    %
%	Answer		TERM		The answer given for that    %
%					particular question          %
%                                                                    %
% Once a form has been sent and returned (proweb_send_form/1) all of %
% the answers given by the CLIENT are accessible by the SERVER.      %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Either retrieve or check the answer to a question which appears in a form
which has previously been sent to the CLIENT.
<P>
For example, in the program :-
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
property( 1, `1st` ).
property( 2, `2nd` ).
property( 3, `3rd` ).
property( 4, `4th` ).

insure :-
	forall(
	        (
	           property( Property, _Pth ),
	           proweb_returned_answer( select_property(Property), on )
	        ),
	        insure_property( Property )
	      ).
</PRE></FONT>
only the properties selected by the client (returned answer is <I>on</I>)
will be underwritten.
<BR><BR><BR><BR>
<A NAME="PG0610">
<H3>Exported Predicate : proweb_post_reply / 2</H3>
</A NAME="PG0610">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_post_reply( +Reply, +Value )                                %
%                                                                    %
%	Reply		TERM		Reply to be put into a form  %
%                                                                    %
%	Value		TERM		Value of the reply           %
%                                                                    %
% Forms which conclude the dialogue with the CLIENT contain replies. %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

The main purpose of a ProWeb application is to compute a set of replies
based on a set of questions asked.  This predicate is called, usually
towards the end of a ProWeb application, to post such replies.  The replies
are not sent immediately to the CLIENT but are included within their
specified forms. When the SERVER is ready to send a page to the CLIENT
all the posted replies will be sent.
<P>
For example, in the program :-
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
member :-
        solution(
                  member( X, [a,b,a,c] ),
                  Solution
                ),
	proweb_post_unique_reply( solution, Solution ),
	proweb_post_reply( answer, X ),
	proweb_resend_form( solution_form ).
</PRE></FONT>
the answer <I>X</I> will be posted for inclusion in the <I>solution_form</I>.
<P>
If the conversation between SERVER and CLIENT continues then all the replies
will be re-computed within the next invocation of the user's main program.
Replies are not persistent between invocations and so they will not
automatically accumulate.
<P>
For example, in the above program the 1st invocation will post the answer
<I>a</I>, the 2nd invocation will post the answer <I>b</I>, the 3rd
invocation will post the answer <I>a</I> and the 4th invocation will post
the answer <I>c</I>.
<BR><BR><BR><BR>
<A NAME="PG0611">
<H3>Exported Predicate : proweb_post_unique_reply / 2</H3>
</A NAME="PG0611">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_post_unique_reply( +Reply, +Value )                         %
%                                                                    %
%	Reply		TERM		Reply to be put into a form  %
%                                                                    %
%	Value		TERM		Value of the reply           %
%                                                                    %
% Forms which conclude the dialogue with the CLIENT contain replies. %
% New replies are saved as part of the conversational database and   %
% as such will be remembered between pages.  This facility emulates  %
% backtracking between pages by not re-generating the same reply.    %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

This predicate behaves in much the same way as <B>proweb_post_reply/2</B>
except that :-
<OL TYPE=i>
  <LI>Replies persist between invocations of the user's main procedure.
  <LI>They accumulate as the conversation between SERVER and CLIENT progresses.
  <LI>Only unique reply values are recorded.
</OL>
This last facet of the predicate allows for backtracking to be simulated,
as in the following example :-
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
member :-
        solution(
                  member( X, [a,b,a,c] ),
                  Solution
                ),
	proweb_post_unique_reply( solution, Solution ),
	proweb_post_reply( answer, X ),
	proweb_resend_form( solution_form ).
</PRE></FONT>
whereby unique values of <I>solution</I> will be posted for inclusion in
the <I>solution_form</I>.
<P>
The 1st invocation will post the <I>solution</I> number 1.  The 2nd
invocation will not post <I>solution</I> number 1 since this was posted by the 1st
invocation, and so <I>solution</I> number 2 is posted. Similarly, the 3rd
and 4th invocations will post <I>solution</I> number 3 and <I>solution</I>
number 4, respectively.
<BR><BR><BR><BR>
<A NAME="PG0612">
<H3>Exported Predicate : proweb_posted_reply / 2</H3>
</A NAME="PG0612">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_posted_reply( ?Reply, ?Value )                              %
%                                                                    %
%	Reply		TERM		Reply to be put into a form  %
%                                                                    %
%	Value		TERM		Value of the reply           %
%                                                                    %
% A reply which has been sent.                                       %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

Test whether a reply has been sent and get its value.
<P>
For example, the following code segment refers to calculated premiums
which have been posted.
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
        ...
	Reply = insured_premium(Insured,Property),
	sumall(
	        Premium,
	        (
	           sum_insured( Insured, _ ),
	           proweb_posted_reply( Reply, Premium )
	        ),
	        TotalP
	      ),
        ...
</PRE></FONT>
<BR><BR><BR><BR>
<A NAME="PG0613">
<H3>Exported Predicate : proweb_dynamic / 1</H3>
</A NAME="PG0613">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_dynamic( +Predicate / +Arity )                              %
%                                                                    %
%	Predicate       ATOM            Name of dynamic predicate    %
%                                                                    %
%	Arity		INTEGER         Its arity                    %
%                                                                    %
% Declaration of user's dynamic predicate which persists between     %
% pages within a CLIENT-SERVER conversation.                         %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

For example, routes can be successively optimized without re-computation
by cacheing them. These persist between pages within a CLIENT-SERVER
conversation.
<P>
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
salesman :-
        proweb_send_form( travel_selection ),
	proweb_returned_answer( towns,     Towns     ),
	proweb_returned_answer( algorithm, Algorithm ),
	proweb_returned_answer( database,  Database  ),
	(
	   proweb_retract( route(RouteA) )
	->
	   salesman_optimize( RouteA, RouteB )
	;
           salesman_route( Algorithm, Database, Towns, RouteB )
        ),
        <B>proweb_dynamic</B>( route / 1 ),
        proweb_asserta( route(RouteB) ),
	proweb_post_reply( route, ol(type=1) @ RouteB ),
	salesman_save_route( RouteB, RouteFile ),
	proweb_send_form( travel_route(RouteFile) ).
</PRE></FONT>
<BR><BR><BR><BR>
<A NAME="PG0614">
<H3>Exported Predicate : proweb_asserta / 1</H3>
</A NAME="PG0614">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_asserta( +Fact )                                            %
%                                                                    %
%	Fact            CALLABLE        Asserted fact                %
%                                                                    %
% Fact which persists between pages within a CLIENT-SERVER           %
% conversation.                                                      %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

For example, routes can be successively optimized without re-computation
by cacheing them. These persist between pages within a CLIENT-SERVER
conversation.
<P>
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
salesman :-
        proweb_send_form( travel_selection ),
	proweb_returned_answer( towns,     Towns     ),
	proweb_returned_answer( algorithm, Algorithm ),
	proweb_returned_answer( database,  Database  ),
	(
	   proweb_retract( route(RouteA) )
	->
	   salesman_optimize( RouteA, RouteB )
	;
           salesman_route( Algorithm, Database, Towns, RouteB )
        ),
        proweb_dynamic( route / 1 ),
        <B>proweb_asserta</B>( route(RouteB) ),
	proweb_post_reply( route, ol(type=1) @ RouteB ),
	salesman_save_route( RouteB, RouteFile ),
	proweb_send_form( travel_route(RouteFile) ).
</PRE></FONT>
<BR><BR><BR><BR>
<A NAME="PG0615">
<H3>Exported Predicate : proweb_assertz / 1</H3>
</A NAME="PG0615">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_assertz( +Fact )                                            %
%                                                                    %
%	Fact            CALLABLE        Asserted fact                %
%                                                                    %
% Fact which persists between pages within a CLIENT-SERVER           %
% conversation.                                                      %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

For example, routes can be successively optimized without re-computation
by cacheing them. These persist between pages within a CLIENT-SERVER
conversation.
<P>
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
salesman :-
        proweb_send_form( travel_selection ),
	proweb_returned_answer( towns,     Towns     ),
	proweb_returned_answer( algorithm, Algorithm ),
	proweb_returned_answer( database,  Database  ),
	(
	   proweb_retract( route(RouteA) )
	->
	   salesman_optimize( RouteA, RouteB )
	;
           salesman_route( Algorithm, Database, Towns, RouteB )
        ),
        proweb_dynamic( route / 1 ),
        <B>proweb_assertz</B>( route(RouteB) ),
	proweb_post_reply( route, ol(type=1) @ RouteB ),
	salesman_save_route( RouteB, RouteFile ),
	proweb_send_form( travel_route(RouteFile) ).
</PRE></FONT>
<BR><BR><BR><BR>
<A NAME="PG0616">
<H3>Exported Predicate : proweb_retract / 1</H3>
</A NAME="PG0616">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_retract( +Fact )                                            %
%                                                                    %
%	Fact            CALLABLE        Asserted fact                %
%                                                                    %
% Fact which persisted between pages within a CLIENT-SERVER          %
% conversation.                                                      %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

For example, routes can be successively optimized without re-computation
by cacheing them. These persist between pages within a CLIENT-SERVER
conversation.
<P>
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
salesman :-
        proweb_send_form( travel_selection ),
	proweb_returned_answer( towns,     Towns     ),
	proweb_returned_answer( algorithm, Algorithm ),
	proweb_returned_answer( database,  Database  ),
	(
	   <B>proweb_retract</B>( route(RouteA) )
	->
	   salesman_optimize( RouteA, RouteB )
	;
           salesman_route( Algorithm, Database, Towns, RouteB )
        ),
        proweb_dynamic( route / 1 ),
        proweb_asserta( route(RouteB) ),
	proweb_post_reply( route, ol(type=1) @ RouteB ),
	salesman_save_route( RouteB, RouteFile ),
	proweb_send_form( travel_route(RouteFile) ).
</PRE></FONT>
<BR><BR><BR><BR>
<A NAME="PG0617">
<H3>Exported Predicate : proweb_retractall / 1</H3>
</A NAME="PG0617">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_retractall( +Fact )                                         %
%                                                                    %
%	Fact            CALLABLE        Asserted fact                %
%                                                                    %
% Fact which persisted between pages within a CLIENT-SERVER          %
% conversation.                                                      %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

For example, routes can be successively optimized without re-computation
by cacheing them. These persist between pages within a CLIENT-SERVER
conversation.
<P>
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
salesman :-
        proweb_send_form( travel_selection ),
	proweb_returned_answer( towns,     Towns     ),
	proweb_returned_answer( algorithm, Algorithm ),
	proweb_returned_answer( database,  Database  ),
	(
	   proweb_retract( route(RouteA) )
	->
	   salesman_optimize( RouteA, RouteB )
	;
           salesman_route( Algorithm, Database, Towns, RouteB )
        ),
        <B>proweb_retractall</B>( route(_) ),
        proweb_asserta( route(RouteB) ),
	proweb_post_reply( route, ol(type=1) @ RouteB ),
	salesman_save_route( RouteB, RouteFile ),
	proweb_send_form( travel_route(RouteFile) ).
</PRE></FONT>
<BR><BR><BR><BR>
<A NAME="PG0618">
<H3>Exported Predicate : proweb_call / 1</H3>
</A NAME="PG0618">

<PRE>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
% proweb_call( ?Fact )                                               %
%                                                                    %
%	Fact            CALLABLE        Asserted fact                %
%                                                                    %
% Fact which persists between pages within a CLIENT-SERVER           %
% conversation.                                                      %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</PRE>

For example, routes can be successively optimized without re-computation
by cacheing them. These persist between pages within a CLIENT-SERVER
conversation.
<P>
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
salesman :-
        proweb_send_form( travel_selection ),
	proweb_returned_answer( towns,     Towns     ),
	proweb_returned_answer( algorithm, Algorithm ),
	proweb_returned_answer( database,  Database  ),
	(
	   <B>proweb_call</B>( route(RouteA) )
	->
	   salesman_optimize( RouteA, RouteB )
	;
           salesman_route( Algorithm, Database, Towns, RouteB )
        ),
        proweb_dynamic( route / 1 ),
        proweb_asserta( route(RouteB) ),
	proweb_post_reply( route, ol(type=1) @ RouteB ),
	salesman_save_route( RouteB, RouteFile ),
	proweb_send_form( travel_route(RouteFile) ).
</PRE></FONT>

</TD></TABLE><IMG SRC="lpa_logo.gif">
</BODY>
</HTML>
