ORDSET

%   Author : R.A.O'Keefe
%   Purpose: Ordered set manipulation utilities

This module manipulates sets represented by ordered lists with no
duplicates. 

Thus {c,r,a,f,t} would be [a,c,f,r,t].  The ordering
is defined by the @< family of term comparison predicates, which
is the ordering used by sort/2 and setof/3.

The benefit of the ordered representation is that the elementary
set operations can be done in time proportional to the Sum of the
argument sizes rather than their Product.  Some of the unordered
set routines, such as member/2, length/2, select/3 can be used
unchanged.  The main difficulty with the ordered representation is
remembering to use it!

________________________________________________________________________

list_to_ord_set/2

convert a list to an ordered list represented set

	list_to_ord_set(List, Set)

	+List		<list>
	?Set		<variable> or <list>

	list_to_ord_set(+List, ?Set)
	is true when Set is the ordered representation of the set represented
	by the unordered representation List.  The only reason for giving it
	a name at all is that you may not have realised that sort/2 could be
	used this way.

	Example

		?- list_to_ord_set([a,b,a,e,d,a,a], S).
		S = [a,b,d,e]


________________________________________________________________________

merge/3

merge two lists

	merge(List1, List2, Merged)

	+List1		<list>
	+List2		<list>
	-Merged		<variable>

	merge(+List1, +List2, -Merged)
	is true when Merged is the stable merge of the two given lists.
	If the two lists are not ordered, the merge doesn't mean a great
	deal.  Merging is perfectly well defined when the inputs contain
	duplicates, and all copies of an element are preserved in the
	output, e.g. merge("122357", "34568", "12233455678").  


	Example

		?- merge([1,2,2,3,4,8,8], [1,1,5,7,8], M).
		M = [1,1,1,2,2,3,4,5,7,8,8,8]

________________________________________________________________________

ord_disjoint/2

check whether two sets are disjoint

	ord_disjoint(Set1, Set2)

	+Set1		<list>
	+Set2		<list>

	ord_disjoint(+Set1, +Set2)
	is true when the two ordered sets have no element in common.  If the
	arguments are not ordered, I have no idea what happens.

	Examples

		?- ord_disjoint([], []).
		yes

		?- ord_disjoint([a,b,c], []).
		yes

		?- ord_disjoint([a,b,c], [b,d,e]).
		no

		?- ord_disjoint([1,2,3], [a,b,c]).
		yes
		

________________________________________________________________________

ord_insert/3

add an element to a set

	ord_insert(Set1, Element, Set2)

	+Set1		<list>
	+Element	<term>
	?Set2		<list> or <variable>

	ord_insert(+Set1, +Element, ?Set2)
	is the equivalent of add_element for ordered sets.  It should give
	exactly the same result as merge(Set1, [Element], Set2), but a bit
	faster, and certainly more clearly.

	Examples

		?- ord_insert([a,b,c], [f], S).
		S = [a,b,c,[f]]
		
		?- ord_insert([a,b,c], f, S).
		S = [a,b,c,f]
		

________________________________________________________________________

ord_intersect/2

check whether two sets intersect

	ord_intersect(Set1, Set2)

	+Set1		<list>
	+Set2		<list>

	ord_intersect(+Set1, +Set2)
	is true when the two ordered sets have at least one element in common.

	Examples

		?- ord_intersect([], []).
		no
		
		?- ord_intersect([a,b,c], []).
		no
		
		?- ord_intersect([a,b,c], [b,d,e]).
		yes
		
		?- ord_intersect([1,2,3], [a,b,c]).
		no
		

________________________________________________________________________

ord_intersect/3

compute the intersection of two sets

	ord_intersect(Set1, Set2, Intersection)

	+Set1		<list>
	+Set2		<list>
	?Intersection	<list> or <variable>

	ord_intersect(+Set1, +Set2, ?Intersection)
	is true when Intersection is the ordered representation of
	intersection of Set1 and Set2, i.e. the elements present in
	both Set1 and Set2, provided that Set1 and Set2 are ordered sets.

	Examples

		?- ord_intersect([], [], I).
		I = []
		
		?- ord_intersect([a,b,c], [], I).
		I = []
		
		?- ord_intersect([a,b,c], [b,d,e], I).
		I = [b]
		
		?- ord_intersect([1,2,3], [a,b,c], I).
		I = []
		

________________________________________________________________________

ord_seteq/2

check for set equality

	ord_seteq(Set1, Set2)

	+Set1		<list>
	+Set2		<list>

	ord_seteq(+Set1, +Set2)
	is true when the two arguments represent the same set.  

	Examples

		?- ord_seteq([a,b,c], [a,b,c]).
		yes
		
		?- ord_seteq([a,b,c], [a,b]).
		no
		
		?- ord_seteq([], []).
		yes
		

________________________________________________________________________

ord_subset/2

check whether a set is a subset of another

	ord_subset(Set1, Set2)

	+Set1		<list>
	+Set2		<list>

	ord_subset(+Set1, +Set2)
	is true when every element of the ordered set Set1 appears in the
	ordered set Set2.

	Examples

		?- ord_subset([a], [a,b,c]).
		yes
		
		?- ord_subset([a,d], [a,b,c]).
		no
		
		?- ord_subset([], [a,b,c]).
		yes
		
		?- ord_subset([a], []).
		no
		
________________________________________________________________________

ord_subtract/3

subtract a set from another

	ord_subtract(Set1, Set2, Difference)

	+Set1		<list>
	+Set2		<list>
	?Difference	<list> or <variable>

	ord_subtract(+Set1, +Set2, ?Difference)
	is true when Difference contains all and only the elements of Set1
	which are not also in Set2.

	Examples

		?- ord_subtract([a,b,c], [b,c], S).
		S = [a]
		
		?- ord_subtract([a,b,c], [d,e], S).
		S = [a,b,c]
		
		?- ord_subtract([a,b,c], [], S).
		S = [a,b,c]
		
		?- ord_subtract([], [d,e], S).
		S = []

________________________________________________________________________

ord_symdiff/3

compute the symetric difference of two sets

	ord_symdiff(Set1, Set2, Difference)

	+Set1		<list>
	+Set2		<list>
	?Difference	<list> or <variable>

	ord_symdiff(+Set1, +Set2, ?Difference)
	is true when Difference is the symmetric difference of Set1 and Set2.

	Examples

		?- ord_symdiff([a,b,c], [b,c,d], S).
		S = [a,d]
		
		?- ord_symdiff([], [], S).
		S = []

________________________________________________________________________

ord_union/3

compute the union of two sets

	ord_union(Set1, Set2, Union)

	+Set1		<list>
	+Set2		<list>
	?Union		<list> or <variable>
	
	ord_union(+Set1, +Set2, ?Union)
	is true when Union is the union of Set1 and Set2.  


	Examples

		?- ord_union([a,b,c], [b,c,d], U).
		U = [a,b,c,d]
		
		?- ord_union([a,b,c], [], U).
		U = [a,b,c]
		
		
