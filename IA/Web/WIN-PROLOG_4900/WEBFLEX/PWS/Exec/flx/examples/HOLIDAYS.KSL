/* 

   HOLIDAYS.KSL  - Clive Spenser May 2002

This program is based on TREE.KSL and generates a question/answer session on the subject of holidays.

It uses the group and question definitions, and a number of different relations.

Method
------

We use uniquely named relations; where each relation performs a simple test of the form:

'if questionN is value'

This invokes the Flex Question/Answer mechanism. 
Depending on the answer, we follow down a different branch of the tree.
This is in the form of invoking another relation.

We have N tests in a relation to handle the N different answers.

Notice: we have slightly different questions for the different branches.

The tree, viewed thru the names of the relations, is:

level0
   level1_y
      level2_ya
         level2_ya1
         level2_ya2
         level2_ya3
         level2_ya4
      level2_yb
         level2_yb1
         level2_yb2
         level2_yb3
         level2_yb4
      level2_yc
         level2_yc1
         level2_yc2
         level2_yc3
         level2_yc4
   level1_n
      level2_na
         level2_na1
         level2_na2
         level2_na3
         level2_na4
      level2_nb
         level2_nb1
         level2_nb2
         level2_nb3
         level2_nb4
      level2_nc
         level2_nc1
         level2_nc2
         level2_nc3
         level2_nc4

Branching 2 then 3 then 4; this gives 24 outcomes (leaf nodes)

There are questions for each brach with a related name, which take their
options from a group. The naming convention is:

levelN_X

where N is the level number and
      X is y/n or a/b/c relating to the answer

and

levelN_X_q

is the next question to ask

As the method is totally generic, you can easily (?) adapt the example to fit your domain

*/


action run1;
   do  restart
   and level0
   and display_reasons.
   
/* pick-up the answers and reverse them in a set 
   we use the $ symbol to avoid derefencing the name of the question to the answer */
action display_reasons;
   do  findall( cv(Q,B), current_value( Q, A, B ), AnswersRev )
   and sort( $AnswersRev, Answers )
   and write_answers( $Answers ).

/* extract the first answer and call program to write it out */
relation write_answers( {} ).
relation write_answers( Items )
   if  remove( First, $Items, Rest )
   and write_one_answer( $First )
   and write_answers( $Rest ).

/* writes out one answer */
action write_one_answer( cv(Q,B) );
   do  true
   and isa_question( Q, Text, _, _)
   and my_write_list_to_string( Text , TText )
   and write( '<P> You answered: <B>')
   and write( B )
   and write('</B> to question <B>')
   and write( $Q )
   and write('</B> which was:<I>'-TText )
   and write( '</I>')
   and true .


relation my_write_list( {} ) .
relation my_write_list( Items )
   if  remove( First, Items, Rest )
   and write( First ) and write(' ')
   and my_write_list( Rest ) .


action my_write_list_to_string( Items, TText )
   do ~>( my_write_list( Items), TText ) .


relation level0
   if  level0_q is yes 
   and level1_y 
   or  level0_q is no
   and level1_n.

relation level1_y 
   if  ans( level1_y_q, yes, a )
   and level2_ya
   or  ans( level1_y_q, yes, b )
   and level2_yb
   or  ans( level1_y_q, yes, c )
   and level2_yc .

relation level1_n 
   if  ans( level1_n_q, no, a )
   and level2_na
   or  ans( level1_n_q, no, b )
   and level2_nb
   or  ans( level1_n_q, no, c )
   and level2_nc .

/* end of level1 */

/* level 2    */

/* level 2y   */
relation level2_ya 
   if  ans( level2_ya_q, yes, a, 1 )
   and level3_ya1
   or  ans( level2_ya_q, yes, a, 2 )
   and level3_ya2
   or  ans( level2_ya_q, yes, a, 3 ) 
   and level3_ya3
   or  ans( level2_ya_q, yes, a, 4 )
   and level3_ya4 .

relation level2_yb
   if  ans( level2_yb_q, yes, b, 1 )
   and level3_yb1
   or  ans( level2_yb_q, yes, b, 2 )
   and level3_yb2
   or  ans( level2_yb_q, yes, b, 3 ) 
   and level3_yb3
   or  ans( level2_yb_q, yes, b, 4 )
   and level3_yb4 .

relation level2_yc
   if  ans( level2_yc_q, yes, c, 1 )
   and level3_yc1
   or  ans( level2_yc_q, yes, c, 2 )
   and level3_yc2
   or  ans( level2_yc_q, yes, c, 3 ) 
   and level3_yc3
   or  ans( level2_yc_q, yes, c, 4 )
   and level3_yc4 .

relation level2_na 
   if  ans( level2_na_q, no,  a, 1 )
   and level3_na1
   or  ans( level2_na_q, no,  a, 2 )
   and level3_na2
   or  ans( level2_na_q, no,  a, 3 ) 
   and level3_na3
   or  ans( level2_na_q, no,  a, 4 )
   and level3_na4 .

relation level2_nb
   if  ans( level2_nb_q, no,  b, 1 )
   and level3_nb1
   or  ans( level2_nb_q, no,  b, 2 )
   and level3_nb2
   or  ans( level2_nb_q, no,  b, 3 ) 
   and level3_nb3
   or  ans( level2_nb_q, no,  b, 4 )
   and level3_nb4 .

relation level2_nc
   if  ans( level2_nc_q, no,  c, 1 )
   and level3_nc1
   or  ans( level2_nc_q, no,  c, 2 )
   and level3_nc2
   or  ans( level2_nc_q, no,  c, 3 ) 
   and level3_nc3
   or  ans( level2_nc_q, no,  c, 4 )
   and level3_nc4 .


/* the questions */

/* choice of yes or no */

question level0_q
   Do you prefer hot to cold holidays? ;
   choose one of yesno .

/* choice of a, b, c */

question level1_y_q
   Which continent do you prefer? ;
   choose one of abc_y .

question level1_n_q
   Which continent do you prefer? ;
   choose one of abc_n .

/* choice of 1, 2, 3, 4 */
question level2_ya_q
   Which terrain do you prefer? ;
   choose one of '1234_ya'.

question level2_yb_q
   Which terrain do you prefer? ;
   choose one of '1234_yb'.

question level2_yc_q
   Which terrain do you prefer? ;
   choose one of '1234_yc'.

question level2_na_q
   Which terrain do you prefer? ;
   choose one of '1234_na'.

question level2_nb_q
   Which terrain do you prefer? ;
   choose one of '1234_nb'.

question level2_nc_q
   Which terrain do you prefer? ;
   choose one of '1234_nc'.

/* Style descriptions */

frame generic_style ;
   default method is radio .

frame level0_q_style    is a generic_style .
frame level1_y_q_style  is a generic_style .
frame level1_n_q_style  is a generic_style .
frame level2_ya_q_style is a generic_style .
frame level2_yb_q_style is a generic_style .
frame level2_yc_q_style is a generic_style .
frame level2_na_q_style is a generic_style .
frame level2_nb_q_style is a generic_style .
frame level2_nc_q_style is a generic_style .


/* the answers */

relation level3_ya1
   if write( 'I suggest a trip down the Nile' ) 
   and nl.
relation level3_ya2 
   if write( 'I suggest a trip to Gambia'  ) 
   and nl.
relation level3_ya3 
   if write( 'I suggest a trip to the Sahara'  ) 
   and nl.
relation level3_ya4 
   if write( 'I suggest a trip to Nigeria'  ) 
   and nl.

relation level3_yb1 
   if write( 'I suggest a trip along the Amazon' ) 
   and nl.
relation level3_yb2 
   if write( 'I suggest a trip to Bahia' ) 
   and nl.
relation level3_yb3 
   if write( 'I suggest a trip to Venezuela' ) 
   and nl.
relation level3_yb4 
   if write( 'I suggest a trip to Peru' ) 
   and nl.

relation level3_yc1 
   if write( 'I suggest a trip along the Rhone' ) 
   and nl.
relation level3_yc2 
   if write( 'I suggest a trip to Faro' ) 
   and nl.
relation level3_yc3 
   if write( 'I suggest a visit to the Alps' ) 
   and nl.
relation level3_yc4 
   if write( 'I suggest a trip to Venice' ) 
   and nl.

relation level3_na1 
   if write( 'I suggest a trip to India' ) 
   and nl.
relation level3_na2 
   if write( 'I suggest a trip to Thailand' ) 
   and nl.
relation level3_na3 
   if write( 'I suggest a trip to Anartica' ) 
   and nl.
relation level3_na4 
   if write( 'I suggest a trip to Australia' ) 
   and nl.

relation level3_nb1 
   if write( 'I suggest a trip along the Mississippi' ) 
   and nl.
relation level3_nb2 
   if write( 'I suggest a trip to Boston' ) 
   and nl.
relation level3_nb3 
   if write( 'I suggest a trip to the Rockys' ) 
   and nl.
relation level3_nb4 
   if write( 'I suggest a visit to Victoria' ) 
   and nl.

relation level3_nc1 
   if write( 'I suggest a trip along the Rhine' ) 
   and nl.
relation level3_nc2 
   if write( 'I suggest a trip to the Baltic' ) 
   and nl.
relation level3_nc3 
   if write( 'I suggest a visit to the Alps' ) 
   and nl.
relation level3_nc4 
   if write( 'I suggest a trip to Ireland' ) 
   and nl.

/* the groups for the questions */

group yesno
   yes, 
   no .

group abc_y
   africa, 
   sth_america, 
   europe.

group abc_n
   asia, 
   nth_america, 
   europe.

group '1234_ya'
   rivers, sea, desert, mixed .

group '1234_yb'
   rivers, sea, desert, mixed .

group '1234_yc'
   rivers, sea, mountains, mixed .

group '1234_na'
   rivers, sea, snow, mixed .

group '1234_nb'
   rivers, sea, ice, mixed .

group '1234_nc'
   rivers, sea, mountains, mixed .

relation ans( africa,      yes, a ).
relation ans( sth_america, yes, b ).
relation ans( europe,      yes, c ).

relation ans( asia,        no,  a ).
relation ans( nth_america, no,  b ).
relation ans( europe,      no,  c ).

relation ans( rivers,      yes, a, 1 ).
relation ans( sea,         yes, a, 2 ).
relation ans( desert,      yes, a, 3 ).
relation ans( mixed,       yes, a, 4 ).

relation ans( rivers,      yes, b, 1 ).
relation ans( sea,         yes, b, 2 ).
relation ans( desert,      yes, b, 3 ).
relation ans( mixed,       yes, b, 4 ).

relation ans( rivers,      yes, c, 1 ).
relation ans( sea,         yes, c, 2 ).
relation ans( mountains,   yes, c, 3 ).
relation ans( mixed,       yes, c, 4 ).

relation ans( rivers,      no,  a, 1 ).
relation ans( sea,         no,  a, 2 ).
relation ans( snow,        no,  a, 3 ).
relation ans( mixed,       no,  a, 4 ).

relation ans( rivers,      no,  b, 1 ).
relation ans( sea,         no,  b, 2 ).
relation ans( ice,         no,  b, 3 ).
relation ans( mixed,       no,  b, 4 ).

relation ans( rivers,      no,  c, 1 ).
relation ans( sea,         no,  c, 2 ).
relation ans( mountains,   no,  c, 3 ).
relation ans( mixed,       no,  c, 4 ).

