***************
* LPA WebFlex *
***************

Changes and Extensions
======================

WIN-PROLOG 4.820
================

From version 4.820, the following extensions have been made, these
changes will not affect existing applications.

Various tags within the webflex html output have been wrapped in 
"<div>" tags with appropriate class identifiers. This allows those
sections to be referenced in CSS style sheets. 
The general form of the class identifier for the div tags is 
"wfs..." where ... is the specific identifier.

class identifiers
-----------------

submit buttons           : class="wfssubmit"
question table           : class="wfsqtable"
question message         : class="wfsmessage"
question                 : class="wfsquestion"
explanation text         : class="wfsexplaintext"

These are class identifiers for "<img>" tags :

explanation button image : class="wfsexplain"
browse button image      : class="wfsbrowse"

.INI file changes
-----------------

The application sections of the WEBFLEX.INI file now allows
the addition of:

explain_type=text|none|button

'text' declares that the explain text is to appear on
the page for that application. 

'button' declares that an explain button 
will be presented instead and explain text will be
presented in a javascript alert box on clicking that button.

'none' declares that no explanation will be shown at all.

If omitted the default is button.

Bug fixes
=========

5 December 2002
***************

Prefills in edit fields were not being recognized for general text entry only
numbers, integers and sets were being recognized. This has now been fixed.


Introduction
============

This system comprises of an Internet enabled version of the
flex expert system toolkit. It requires that you have licensed copy of
Win-Prolog version 4.900, flex and proweb installed. The files are stored in the 
directory WEBFLEX which is a sub-directory of your prolog directory.

Setup
=====

After installing WebFlex the directory will contain the following files:

webflex
|
+---pws
|   +---Data
|   |   \---Flx
|   |       +---images ...
|   |       \---Temp
|   \---Exec
|       \---Flx
|           |   webflex.exe
|           |   webflex.ini
|           |   webflex.pc
|           +---system
|           \---examples
|
\---wwwroot

The directories contain the LPA website examples for webflex. To set up
webflex so that it will work you need to do the following. You need an HTTP
server such as Microsoft IIS, and the documentation that follows will assume
that it is IIS and that the main directory is C:\INETPUB and that the home
directory is C:\INETPUB\WWWROOT. xcopy the pws and the wwwroot directories
into the INETPUB directory from a dos box as:

        C> xcopy myprologdirectory\webflex\pws     c:\inetpub\pws /e
        C> xcopy myprologdirectory\webflex\wwwroot c:\inetpub\wwwroot /e

so now you have the directory structure:

c:\inetpub
|
+---pws
|   +---Data
|   |   \---Flx
|   |       +---images
|   |       \---Temp
|   \---Exec
|       \---Flx
|           |   webflex.exe
|           |   webflex.ini
|           |   webflex.pc
|           +---system
|           \---examples
\---wwwroot

Next you need to copy the files PROWEB.OVL, FLEX.PC and PRO386W.EXE files into
the C:\INETPUB\PWS\EXEC\FLX directory as:
     copy PROWEB.OVL and rename to WEBFLEX.OVL in the above directory.
     copy PRO386W.EXE and rename to WEBFLEX.SYS in the above directory.
     copy FLEX.PC to the above directory.

Next you need to edit the file c:\inetpub\pws\exec\flx\webflex.ini and change
the lines

BASE_URL=http://velociraptor/pws_exec/flx/
TEMP_URL=http://velociraptor/pws_data/flx/temp/

to

BASE_URL=http://myservername/pws_exec/flx/
TEMP_URL=http://myservername/pws_data/flx/temp/

If the directory you copied to is not called INETPUB then you also need to
change the following lines:

TEMP_PATH=c:\inetpub\pws\data\flx\temp\
HTML_PATH=c:\inetpub\pws\data\flx\

to

TEMP_PATH=c:\mydirectory\pws\data\flx\temp\
HTML_PATH=c:\mydirectory\pws\data\flx\

Now you need to set up the aliases \pws_exec and \pws_data to point at
c:\inetpub\pws\exec and c:\inetpub\pws\data respectively, how you do this is
dependent on your http server software.

\pws_exec should have execute only permissions and \pws_data should have read
only permissions.

Now you need to copy your licensed copy of PRO386W.EXE to the
c:\inetpub\pws\exec\flx and rename it WEBFLEX.SYS .

The WebFlex examples should now be runnable by browsing the page:

   http://myserver/wfs_dem.htm


Preliminary Documentation
-------------------------

WebFlex allows flex programs to run through a browser, to do this it
generates HTML forms for the questions it needs to ask. Indeed most flex
programs will run unchanged immediately through WebFlex, though they will look
rather plain. Unlike previous versions of flex several questions can be asked
at once, obviously this is important for a system that is generating HTML
pages to send to a browser.

INI Files settings
------------------

There are a number of settings contained in the WEBFLEX.INI file to control
webflex.

[general]

This section contains settings that are generally applicable.

The path to the flex KSL files can be specified here (it defaults to examples)
the path should be named as:

   scripts_directory=path

Where path is a relative directory to where WEBFLEX.SYS (PRO386W.EXE) lives.
For example scripts_directory could be set to the directory KSL which is a 
sub-directory of where WEBFLEX.SYS lives, by the entry:

   scripts_directory=ksl

The KSL files for your application will be picked up from this path.

[name]

A NAME section corresponds to a NAME.KSL file in the examples directory and
applies to that. Settings here override settings in the general section.

Applicable settings
===================

main_goal=my_main_goal

This specifies the main goal to run for a given example this is not applicable
to the general section . All other settings can be in the general section .

explain_text=Explain    The text for an explain button.

help_text=Help          The text for an help button.

submit_text=OK          The text for an OK button.

question_seperator=br   The HTML code used to separate questions (could be hr)

explain_image=          An image URL to display instead of the explain button.

help_image=             An image URL to display instead of the help button

submit_image=           An image URL to display instead of the submit button

The following three settings can also be overridden in the style definition of
a question group to allow individual pages for each group of questions .

header=testhead.htm     The head part of the HTML page

body=test.htm           The body part of the HTML page

footer=testfoot.htm     The foot part of the HTML page


General behaviour
-----------------

For each example a header page, a body page and a foot page can be defined
together with the output from the flex program up to the question(s) being
asked and the form containing the question(s) constitute one page to be sent
to the browser .


Example HEAD.HTM, BODY.HTM and FOOT.HTM
=======================================

HEAD.HTM:

<HTML>
<HEAD>
<TITLE>Webflex example</TITLE>
<LINK REL="stylesheet" TYPE="text/css" HREF="/white.css">
</HEAD>


BODY.HTM:

<BODY>
<H2>Robbie the Robot</H2>
<HR>

WebFlex output will be inserted here .


FOOT.HTM

    <P>
    <A HREF="/wfs_dem.htm">Back to WebFlex demos</A><P>
    <A HREF="/ind_top.htm" TARGET="_top">Visit the LPA Home Page!</A><P>
</BODY>
</HTML>


Questions
=========

The basic user input to flex is through questions, webflex allows flex
questions to be grouped together, and for individual questions to have style
information associated, and for question groups to have style information
associated. The way the styles are associated to questions and groups is
through the frame hierarchy by a naming convention. Say you have the question
foo, then by defining a frame foo_style you can add slots to specify various
things.

The ask mechanism allows for the following use:

  ask groupname,

will ask the questions defined in the group groupname :

group group_test1
  multi_choice, single_choice_radio, single_choice_listbox,
  single_choice_dropdown.

Ask can also ask several questions (or one!) as:

  ask q1,q2,q3

The difference is that by using a group you can change the appearance of the
containing table, through the group style frame :

frame group_test1_style
   default caption is 'Form 1' and
   default body is 'test1.htm' and
   default footer is 'tstfoot1.htm' and
   default tablestyle is { bgcolor-'#FFccFF', border-1 } .

or for a question :

question single_choice_radio
  A single-choice radio-button question ;
  choose one of choices
  because I need to test a single-choice radio-button question .

frame single_choice_radio_style ;
  default method is radio and
  default prefill is apples and
  default infix is br .

All output from flex up to the ask will be prepended to the form in the page
so for example:

   ...
   and write( '<h1>hi there<//h1>' )
   and ask group_test1
   ...

will write out the '<h1>hi there<//h1>' before the table containing the
group_test1 form, notice that it is written out as HTML so if you want to use
characters such as > then you will have to write the HTML equivalent, in this
case &gt; as :

   and write( '<h1>hi there 3 &gt; 2<//h1>' ).

Also notice that / is doubled up this is because flex uses / as an escape
character.

Any output after the last question in a program is executed are sent to the
final results page .

The following is a list of styles for various questions and groups.
All of the styles are optional and default to various settings .


Group Styles
============
caption         The caption for the containing table.
columns         The number of columns in the table.
header          A header HTM file for use with this form.
body            A body HTM file for use with this form .
footer          A footer HTM file for use with this form .
tablestyle      A set that defines the style of the containing table of the
                form { attribute-Value, ... } see your HTML documentation for
                attributes applicable to a table, (cellpadding etc.) .


Question Styles
===============

multiple choice styles
######################
method          Set the method, options are: {checkboxes,listbox(default) }
rows            The number of rows in the listbox .
prefill         A set of items on the list to preselect .


single choice styles
####################
method          Set the method options are: { radio, listbox(default) }
rows            The number of rows in the listbox if omitted the single
                choice listbox becomes a drop-down list, only applicable
                if the method is not radio .
prefill         An item on the list to preselect
infix           Infix HTML between each item br or hr say, only applicable
                if the method is radio .

input styles
############
prefill         Text to prefill the text box.
maximum_length  Maximum number of characters to allow.
cols            The number of columns for the text box.
rows            The number of rows for the text box.
lower_bound     The least value for a number input field.
upper_bound     The greatest value for a number input field.

Styles can also be passed down by inheritance, for example if you want to
apply the style 'method is radio' to several fields you can use the following:

frame radio_style ;
   default method is radio .

frame q1_style is a radio_style .
frame q2_style is a radio_style ;
   prefill is fred .


Because and Help
================

The because clause of a question will be associated with a button (or graphic)
on the form that will when clicked show a popup dialog with the contained
because text.

question single_choice_radio
  A single-choice radio-button question ;
  choose one of choices
  because I need to test a single-choice radio-button question .

question input_set
  A set input field ;
  input set ;
  browse file 'http://www.lpa.co.uk/fln.htm' .

Bugs, Problems and Errors
-------------------------

----- Start of List -----

No known bugs.

----- End of List -----

Please report any suspected bugs that do not appear in the above list to
LPA:

Contact Details
---------------

        Info:           info_team@lpa.co.uk
        Sales:          sale_team@lpa.co.uk
        Support:        tech_team@lpa.co.uk

        Phone:          +44 (0) 20 8871 2016
        Fax:            +44 (0) 20 8874 0449
        Web:            http://www.lpa.co.uk

        Logic Programming Associates Ltd
        Studio 30, Royal Victoria Patriotic Building
        Trinity Road, London, SW18 3SX, England.
