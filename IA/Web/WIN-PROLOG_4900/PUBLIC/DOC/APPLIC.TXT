APPLIC

%   Authors: Lawrence Byrd, Richard A. O'Keefe, Ken Johnson
%   Purpose: Various "function" application routines based on apply/2.

________________________________________________________________________

apply/2

apply a predicate to a list of arguments

	apply(Pred, Args)

	+Pred		<atom> or <compound>
	+Args		<list>


	apply/2 is basically a variant of call/1 where some of the
	arguments are already in Pred and the rest are passed in the
	list of Args. Thus apply(foo, [X,Y]) is the same as calling
	foo(X,Y), and apply(foo(X), [Y]) is the same as calling
	foo(X,Y) too.

	Examples

		If foo/3 is defined as:

			% foo/3
			foo(a,b,c).
			foo(c,d,e).
			foo(e,f,g).

		?- P = foo, apply(P, [a,Y,Z]).
		P = foo ,
		Y = b ,
		Z = c

		?- P = foo(c), apply(P, [Y,Z]).
		P = foo(c) ,
		Y = d ,
		Z = e

________________________________________________________________________

checkand/2

check whether a predicate succeeds for all members of a conjunction

	checkand(Pred, Conjunction)

	+Pred		<atom> or <compound>
	+Conjunction	<term>

	checkand(Pred, Conjunction)
	succeeds when Pred(Conjunct) succeeds for every Conjunct in the
	Conjunction.  All the *and predicates in this module assume that
	a&b&c&d is parsed as a&(b&(c&d)), and that the "null" conjunction
	is 'true'.  It is possible for this predicate, and most of the
	others, to backtrack and try alternative solutions.  


	Examples

		?- checkand(integer, 1 & -5 & 6 & 0).
		yes

		?- checkand(integer, 1 & -5 & a & 0).
		no



________________________________________________________________________

checklist/2

check whether a predicate succeeds for all members of a list

	checklist(Pred, List)

	+Pred		<atom> or <compound>
	+List		<list>

	checklist(Pred, List) succeeds when Pred(Elem) succeeds for
	each Elem in List.

	Examples

		% are all the elements of the list greater than 5?
		?- checklist('<'(5), [10, -5, 8, 11]).
		no

		% are all the elements of the list greater than 5?
		?- checklist('<'(5), [10, 15, 8, 11]).
		yes


________________________________________________________________________

convlist/3

filter and convert a list by a given predicate

	convlist(Pred, OldList, NewList)

	+Pred		<atom> or <compound>
	+OldList	<list>
	?NewList	<list> or <variable>

	convlist(Pred, OldList, NewList)
	is a sort of hybrid of maplist/3 and sublist/3.
	Each element of NewList is the image under Pred of some
	element of OldList, and order is preserved, but elements of
	OldList on which Pred is undefined (fails) are not represented.

	Example

		Given succ/2 defined as:

			succ(X,Y) :- integer(X), Y is X+1.

		?- convlist(succ, [1,a,0,joe(99),101], L).
		L = [2,1,102] ;

		no


________________________________________________________________________

exclude/3

filter out a list of element by a given predicate

	exclude(Pred, List, SubList)

	+Pred		<atom> or <compound>
	+List		<list>
	?SubList	<list> or <variable>


	exclude(Pred, List, SubList)
	succeeds when SubList is the SubList of List containing all the
	elements for which Pred(Elem) is *false*.  That is, it removes
	all the elements satisfying Pred.  

	Example

		Given odd/1 defined as:

			odd(N) :- integer(N), 1 =:= N mod 2.

		% remove the odd numbers from a list
		?- exclude(odd, [1,2,3,a,4,5], L).
		L = [2,a,4] ;

		no


________________________________________________________________________


mapand/3

apply a predicate to all members of a conjunction to build a new
transformed one

	mapand(Pred, OldConj, NewConj)

	+Pred		<atom> or <compound>
	+OldConj	<list>
	-NewConj	<variable>

	mapand(Pred, OldConj, NewConj) succeeds when Pred is able to
	rewrite each conjunct of OldConj, and combines the results
	into NewConj. 

	Example

		Given succ defined as:

			succ(N, M) :- M is N + 1.

		?- mapand(succ, 1&2&3&4, M).
		M = (2 & 3 & 4 & 5)


________________________________________________________________________


maplist/3

apply a predicate to all members of a list to build a new transformed one

	maplist(Pred, OldList, NewList)

	+Pred		<atom> or <compound>
	+OldList	<list>
	?NewList	<list> or <variable>

	maplist(Pred, OldList, NewList) succeeds when Pred(Old,New)
	succeeds for each corresponding Old in OldList and New in
	NewList. 

	Examples

		Given succ defined as:

			succ(N, M) :- integer(N), M is N + 1.
			pair_2_NameArity((Name, Arity), Name/Arity).

		?- maplist(succ, [1,2,3,4], L).
		L = [2,3,4,5];

		no


		?- maplist(succ, [1,2,a,4], L).
		no

		?- pdict(-1,P), maplist(pair_2_NameArity,P,NewP). 
		P = [(writeln,1),(built_in,1),(checkand,2),
		     (sublist,3),(maplist,3),(convlist,3),
		     (somechk,2),(apply,2),(checklist,2),(some,2),
		     (exclude,3),(foo,3),(error_message,2),(succ,2),
		     (mapand,3),(between,3),(sysops,0),(wclose,1),
		     (pair_2_NameArity,2)] ,
		NewP = [writeln / 1,built_in / 1,checkand / 2,
			sublist /3,maplist / 3,convlist / 3,
			somechk / 2,apply / 2,checklist /2,some / 2,
			exclude / 3,foo / 3,error_message / 2,succ / 2,
			mapand /3,between / 3,sysops / 0,wclose /1,
			pair_2_NameArity / 2] ;

		no


________________________________________________________________________

some/2

check nondeterministically whether at least one element of a list
satisfies a predicate 

	some(Pred, List)

	+Pred		<atom> or <compound>
	+List		<list>

	some(Pred, List)
	succeeds when Pred(Elem) succeeds for some Elem in List.  It will
	try all ways of proving Pred for each Elem, and will try each Elem
	in the List.  

	Example

		Given odd/1 defined as:

			odd(N) :- integer(N), 1 =:= N mod 2.


		% Note that the query succeeds three times because
		% there are three odd numbers in the list.

		?- X=X, some(odd, [1,2,3,a,4,5]).
		X = _ ;

		X = _ ;

		X = _ ;

		no
________________________________________________________________________

somechk/2

check deterministically whether at least one element of a list
satisfies a predicate 

	somechk(Pred, List)

	+Pred		<atom> or <compound>
	+List		<list>

	somechk/2 is to some/2 as memberchk/2 is to member/2.

	Example

		Given odd/1 defined as:

			odd(N) :- integer(N), 1 =:= N mod 2.


		% Note that the query succeeds once in this case.

		?- X=X, somechk(odd, [1,2,3,a,4,5]).
		X = _

________________________________________________________________________

sublist/3

extract the elements of a list that satisfy a predicate

	sublist(Pred, List, SubList)

	+Pred		<atom> or <compound>
	+List		<list>
	?SubList	<list> or <variable>

	sublist(Pred, List, SubList)
	succeeds when SubList is the sub-sequence of the List containing all
	the Elems of List for which Pred(Elem) succeeds.

	Example

		Given odd/1 defined as:

			odd(N) :- integer(N), 1 =:= N mod 2.


		?- sublist(odd, [1,2,3,a,4,5], L).
		L = [1,3,5]



