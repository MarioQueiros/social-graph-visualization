<HTML>
<HEAD>
<TITLE>ProWeb Server - Application Ins-And-Outs</TITLE>
</HEAD>
<BODY BACKGROUND="lpa_line.gif" BGCOLOR="#C0C0C0" TEXT="#000080" LINK="#0000FF" VLINK="#00FF00" ALINK="#FF0000">
<TABLE COLS=2>
<TD VALIGN=TOP ALIGN=CENTER>
<IMG SRC="lpa_left.gif">
</TD><TD VALIGN=TOP ALIGN=LEFT><IMG SRC="pws.gif"><P>

<H1>Application Ins-And-Outs</H1>

<OL><FONT SIZE=5>
  <LI> <A HREF="#PG0201"> Introduction                           </A>
  <LI> <A HREF="#PG0202"> Example Development                    </A>
  <LI> <A HREF="#PG0203"> Specification of the Address Form      </A>
  <LI> <A HREF="#PG0204"> An Alternative Address Form            </A>
  <LI> <A HREF="#PG0205"> Specification of the Other Input Forms </A>
  <LI> <A HREF="#PG0206"> Specification of the Premiums Form     </A>
  <LI> <A HREF="#PG0207"> Pairwise Friendly Forms                </A>
  <LI> <A HREF="#PG0208"> The Main Program                       </A>
</FONT></OL>

<BR><BR><BR><BR>
<A NAME="PG0201">
<H2>Introduction</H2>
</A NAME="PG0201">

The guiding principle for developing a ProWeb CLIENT-SERVER application 
is that the flow of control should mimic that of an equivalent, 
single-user, single-machine, Windows application.
<P>
For example, consider a simple application which computes the optimal
(shortest) route for a salesman to travel around a number of towns.
The table below shows both the Windows program code and the 
equivalent ProWeb program code.
<P>
<TABLE BORDER=1 CELLSPACING=1 CELLPADDING=4>
<THEAD>
  <TR>
    <TH ALIGN=CENTER> Windows Code </TH>
    <TH ALIGN=CENTER> ProWeb Code  </TH>
  </TR>
</THEAD>
<TBODY>
  <TR>
    <TD VALIGN=TOP><FONT FACE=courier COLOR=800000 SIZE=2><PRE>

salesman :-

  % Which towns to visit
  call_dialog( towns, ok ),
  get_dialog_field( towns,
                    Towns ),

  % Compute the optimal route
  optimal_route( Towns, Route ),
	
  % Inform the user of the route
  set_dialog_field( route,
                    Route ),
  call_dialog( route, ok ).
    </PRE></FONT></TD>
    <TD VALIGN=TOP><FONT FACE=courier COLOR=800000 SIZE=2><PRE>

salesman :-

  % Which towns to visit
  proweb_send_form( towns ),
  proweb_returned_answer( towns,
                          Towns ),

  % Compute the optimal route
  optimal_route( Towns, Route ),
	
  % Inform the user of the route
  proweb_post_reply( route,
                     Route ),
  proweb_send_form( route ).
    </PRE></FONT></TD>
  </TR>
</TBODY>
</TABLE>
<P>

<BR><BR><BR><BR>
<A NAME="PG0202">
<H2>Example Development</H2>
</A NAME="PG0202">

The ins-and-outs of a ProWeb application will be illustrated by the 
development of an example program which computes insurance premiums.
<P>
This example contains many of the key features supported by ProWeb, 
including the design, sending and returning of forms, the specification 
of questions, the retrieval of answers, the posting of replies and how 
they all fit into the control flow of a main procedure.
<P>
For each property to be insured the following forms will be generated by 
the SERVER application for gathering information from the CLIENT and
for returning the corresponding premiums.
<P>

<CENTER>
<FORM ACTION="">
<TABLE BORDER=1 CELLSPACING=4 CELLPADDING=8>
<TR><TD>

<H3><B>Address of the 1st property  ...</B></H3>
<TABLE>
<TR><TD>
Line 1: <INPUT NAME="address_line(1,1),string" TYPE=TEXTAREA VALUE="" SIZE="20,1">
</TD></TR><TR><TD>
Line 2: <INPUT NAME="address_line(2,1),string" TYPE=TEXTAREA VALUE="" SIZE="20,1">
</TD></TR><TR><TD>
Line 3: <INPUT NAME="address_line(3,1),string" TYPE=TEXTAREA VALUE="" SIZE="20,1">
</TD></TR><TR><TD>
Line 4: <INPUT NAME="address_line(4,1),string" TYPE=TEXTAREA VALUE="" SIZE="20,1">
</TD><TD>
<SELECT NAME="address_code(1),atom" SIZE="1">
<OPTION>CB1
<OPTION>CB2
<OPTION>CB3
<OPTION>CB4
<OPTION SELECTED>CB5
</SELECT>
</TD></TR>
</TABLE>

</TD></TR><TR><TD>

<H3><B>Insured sums for the 1st property ...</B></H3>
<TABLE>
<TR><TD>
Buildings
</TD><TD>
<INPUT NAME="sum_insured_amount(buildings,1),number" TYPE=TEXTAREA VALUE="1000000" SIZE="10,1">
</TD></TR><TR><TD>
Machinery
</TD><TD>
<INPUT NAME="sum_insured_amount(machinery,1),number" TYPE=TEXTAREA VALUE="1000000" SIZE="10,1">
</TD></TR><TR><TD>
Stock
</TD><TD>
<INPUT NAME="sum_insured_amount(stock,1),number" TYPE=TEXTAREA VALUE="1000000" SIZE="10,1">
</TD></TR>
</TABLE>

</TD></TR><TR><TD>

<H3><B>Perils which the 1st property is insured against ...</B></H3>
<TABLE BORDER="1" FRAME=BOX RULES=ALL CELLPADDING="4" CELLSPACING="4">
<TR><TD>
Accidental Damage
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(accident,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(accident,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Burst Pipes
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(burst_pipes,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(burst_pipes,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Earthquake
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(earthquake,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(earthquake,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Explosion
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(explosion,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(explosion,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Fire
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(fire,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(fire,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Riot or Malicous Damage
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(riot,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(riot,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Storm or Tempest and Flood
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(storm,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(storm,1),atom" VALUE="No">No
</TD></TR><TR><TD>
Subsidence
</TD><TD>
<INPUT TYPE=RADIO NAME="peril(subsidence,1),atom" VALUE="Yes" CHECKED>Yes
<INPUT TYPE=RADIO NAME="peril(subsidence,1),atom" VALUE="No">No
</TD></TR>
</TABLE>

</TD></TR><TR><TD>

<H3><B>Security measures in force at the 1st property ...</B></H3>
<TABLE BORDER="1" FRAME=BOX RULES=ALL CELLPADDING="4" CELLSPACING="4">
<TR><TD>
Automatic Fire Alarm
</TD><TD>
<INPUT TYPE=RADIO NAME="protection(fire_alarm,1),atom" VALUE="Yes">Yes
<INPUT TYPE=RADIO NAME="protection(fire_alarm,1),atom" VALUE="No" CHECKED>No
</TD></TR><TR><TD>
Automatic Sprinkler
</TD><TD>
<INPUT TYPE=RADIO NAME="protection(sprinkler,1),atom" VALUE="Yes">Yes
<INPUT TYPE=RADIO NAME="protection(sprinkler,1),atom" VALUE="No" CHECKED>No
</TD></TR><TR><TD>
Hose Reels
</TD><TD>
<INPUT TYPE=RADIO NAME="protection(hose_reels,1),atom" VALUE="Yes">Yes
<INPUT TYPE=RADIO NAME="protection(hose_reels,1),atom" VALUE="No" CHECKED>No
</TD></TR><TR><TD>
Fire Extinguishers
</TD><TD>
<INPUT TYPE=RADIO NAME="protection(fire_extinguishers,1),atom" VALUE="Yes">Yes
<INPUT TYPE=RADIO NAME="protection(fire_extinguishers,1),atom" VALUE="No" CHECKED>No
</TD></TR><TR><TD>
Intruder Alarm
</TD><TD>
<INPUT TYPE=RADIO NAME="protection(intruder_alarm,1),atom" VALUE="Yes">Yes
<INPUT TYPE=RADIO NAME="protection(intruder_alarm,1),atom" VALUE="No" CHECKED>No
</TD></TR>
</TABLE>

</TD></TR><TR><TD>

<H3><B>Premiums for the 1st property ...</B></H3>
<TABLE BORDER="1" FRAME=BOX RULES=ALL CELLPADDING="8" CELLSPACING="8">
<TR><TH>
Insured
</TH><TH>
Cover
</TH><TH>
Premium
</TH></TR><TR><TD>
<I>Buildings</I>
</TD><TD>
£1,000,000
</TD><TD>
£52,875
</TD></TR><TR><TD>
<I>Machinery</I>
</TD><TD>
£1,000,000
</TD><TD>
£21,000
</TD></TR><TR><TD>
<I>Stock</I>
</TD><TD>
£1,000,000
</TD><TD>
£27,437
</TD></TR><TR><TH>
Total
</TH><TH>
£3,000,000
</TH><TH>
£101,312
</TH></TR>
</TABLE>

</TD></TR>
</TABLE>
</FORM>
</CENTER>

<BR><BR><BR><BR>
<A NAME="PG0203">
<H2>Specification of the Address Form</H2>
</A NAME="PG0203">

The first point to note is that since many properties are to be 
underwritten the naming convention for both the input and the output 
forms should take this into account. In general, Prolog terms of the 
structure :-
<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
        name_of_form( <I>Property</I> )
</PRE></FONT>
will be used for different instantiations of <I>Property</I>.
<P>
Each instance of the "Address" form above contains a heading, 4 address lines
and a post-code popup menu.
<P>
The address questions are specified by defining clauses for the predicate 
<B>proweb_question/2</B>. These clauses relate the name 
of the question to its type and style of input.
<P>
Each line number, indicated by the parameter <I>Nth</I>, in the address 
of any property is a 20 column edit region. 
The answer will be returned as a Prolog string.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_question(
                 address_line( _Nth, _Property ),
                 [
                   cols = 20,
                   type = string
                 ]
               ).
</PRE></FONT>

The post-code of any property is a popup menu of Prolog atoms.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_question(
                 address_code( _Property ),
                 [
                   type   = menubox,
                   select = ['CB1','CB2','CB3','CB4','CB5']
                 ]
               ).
</PRE></FONT>

A form is specified by defining a clause for the predicate 
<B>proweb_form/2</B> which relates the name of a form 
to its contents. The address lines and post-code questions above are 
structured within the address form as a table. Preceeding the table is 
an emboldened heading stating which property the address relates to. 

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_form(
             property_address( Property ),
             [
               h4 @ b @ [`Address of the `,Pth,` property  ...`],
               table( property_address( Property ) )
             ]
           ) :-
	property( Property, Pth ).
</PRE></FONT>

The structure :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
        table( ... )
</PRE></FONT>

is specific to this example. It is a compound term which is expanded 
at run-time by clauses for the predicate 
<B>proweb_expansion/3</B> in the same way that 
compound terms in a Prolog listing are expanded on input by clauses 
for the Prolog predicate <B>term_expansion/2</B>.
<P>

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_expansion( table( Table ), _Form, Fields ) :-
        Fields = TableAttrs @ [
                                Headfields,
                                BodyFields,
                                FootFields,
                              ],
        table_definition( Table, Attrs, HeadRows, BodyRows, FootRows ),
        TableAttrs =.. [table|Attrs],
        table_rows_expansion( HeadRows, th, HeadFields ),
        table_rows_expansion( BodyRows, td, BodyFields ),
        table_rows_expansion( FootRows, th, FootFields ).


table_rows_expansion( [], _Tag, [] ).
table_rows_expansion( [Row|Rows], Tag, [(tr@Field)|Fields] ) :-
        table_row_expansion(  Row,  Tag, Field  ),
        table_rows_expansion( Rows, Tag, Fields ).

table_row_expansion( [], _Tag, [] ).
table_row_expansion( [Cell|Cells], Tag, [(Tag@Field)|Fields] ) :-
        table_row_expansion( Cells, Tag, Fields ).
</PRE></FONT>

In the address table there are only 4 rows in the table's body, the 
first 3 containing the corresponding address line and the last 
containing both the 4th address line and the post-code of the 
<I>Property</I>.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
table_definition(
/* Table      */        property_address( Property ),
/* Attributes */        [],
/* Head Rows  */        [],
/* Body Rows  */        [
        	          [ `Line 1:`, ?address_line( 1, Property ) ],
        	          [ `Line 2:`, ?address_line( 2, Property ) ],
        	          [ `Line 3:`, ?address_line( 3, Property ) ],
        	          [
        	            `Line 4:`, ?address_line( 4, Property ),
        	            ?address_code( Property )
        	          ]
        	        ],
/* Foot Rows  */        []
                ).
</PRE></FONT>

Each address line consists of text stating which line it is 
followed by the corresponding question.
The prefix operator <I>?</I> indicates a placeholder for a question, 
in this case the <I>Nth</I> address line of some <I>Property</I>.
<P>

<BR><BR><BR><BR>
<A NAME="PG0204">
<H2>An Alternative Address Form</H2>
</A NAME="PG0204">

There is an alternative method for specifying a ProWeb form. Instead 
of describing a form as a list of HTML objects represented by Prolog 
terms a commercial HTML editor can be used to design the form and save 
it as a <B>.HTM</B> file.
<P>

<CENTER>
<TABLE BORDER=1 CELLSPACING=1 CELLPADDING=8>
<THEAD>
  <TR>
    <TH ALIGN=CENTER> C:\WORK\WWW\ADDRESS.HTM </TH>
  </TR>
</THEAD>
<TBODY>
  <TR>
    <TD>
<FONT FACE=courier COLOR=800000 SIZE=2>
<XMP>
<H3><B>Address of property <PROWEB VALUE="%1"> ...</B></H3>
<TABLE>
  <TR>
    <TD>
      Line 1: <PROWEB QUESTION="address_line( 1, %1 )">
    </TD>
  </TR>
  <TR>
    <TD>
      Line 2: <PROWEB QUESTION="address_line( 2, %1 )">
    </TD>
  </TR>
  <TR>
    <TD>
      Line 3: <PROWEB QUESTION="address_line( 3, %1 )">
    </TD>
  </TR>
  <TR>
    <TD>
      Line 4: <PROWEB QUESTION="address_line( 4, %1 )">
    </TD>
    <TD>
      <PROWEB QUESTION="address_code(%1)">
    </TD>
  </TR>
</TABLE>
</XMP>
</FONT>
    </TD>
  </TR>
</TBODY>
</TABLE>
</CENTER>

<P>
Implanted within the HTML file are special elements with the tag 
<B>PROWEB</B> which behave like bookmarks. Such elements are interpreted
as being values, questions, replies or references to other HTML files.
These bookmarks are in-line replaced with the actual HTML text when
the form is generated.
<P>
The element :-

<FONT FACE=courier COLOR=800000 SIZE=2><XMP>
        <PROWEB VALUE="%1">
</XMP></FONT>

will be substituted by the 1st parameter of the form, the property
number which the address relates to.
<P>
The elements :-

<FONT FACE=courier COLOR=800000 SIZE=2><XMP>
        <PROWEB QUESTION="address_line(1,%1)">
        <PROWEB QUESTION="address_line(2,%1)">
        <PROWEB QUESTION="address_line(3,%1)">
        <PROWEB QUESTION="address_line(4,%1)">
        <PROWEB QUESTION="address_code(%1)">
</XMP></FONT>

will be substituted by the HTML objects for the following 
questions, respectively :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
        address_line( 1, Property )
        address_line( 2, Property )
        address_line( 3, Property )
        address_line( 4, Property )
        address_code( Property )
</PRE></FONT>

where <I>Property</I> is the 1st parameter of the form.
<P>
The actual specification of the address form is now a simple clause 
for the predicate <B>proweb_form/2</B> which includes the relevant
HTML file.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_form(
             property_address( _Property ),
             include( 'C:\WORK\WWW\ADDRESS.HTM' )
           ).
</PRE></FONT>

<P>

<BR><BR><BR><BR>
<A NAME="PG0205">
<H2>Specification of the Other Input Forms</H2>
</A NAME="PG0205">

The other input forms for the sums-insured, the perils insured against 
and the protection measures in place for each property follow a 
similar development to that given above for the address form.
The questions in these other input forms are again specified by clauses 
for the predicate <B>proweb_question/2</B>.
<P>
Each sum-insured question is a 10 column edit field which returns a 
numeric answer. The answer must be at least the value 0.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_question(
                 sum_insured_amount( _Insured, _Property ),
                 [
                   cols = 10,
                   type = number,
                   lwb  = 0
                 ]
               ).
</PRE></FONT>

Each peril question and each protection question is a yes/no pair of radio 
buttons.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_question(
                 peril( _Peril, _Property ),
                 [
                   type   = radio,
                   select = ['Yes','No']
                 ]
               ).

proweb_question(
                 protection( _Protection, _Property ),
                 [
                   type   = radio,
                   select = ['Yes','No']
                 ]
               ).
</PRE></FONT>

<P>

<BR><BR><BR><BR>
<A NAME="PG0206">
<H2>Specification of the Premiums Form</H2>
</A NAME="PG0206">

The "Premiums" form collects together all the sum-insured covers, 
the calculated premiums and their totals into a single table for 
presentation to the CLIENT. The table is prefixed by an emboldened 
heading stating which property the premiums relate to.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_form(
             property_premiums( Property ),
             [
               h4 @ b @ [`Premiums for the `,Pth,` property ...`],
               table( property_premiums( Property ) )
             ]
           ) :-
	property( Property, Pth ).
</PRE></FONT>

The table has attributes which give it a framed appearance. It consists of 
a single row in the head area (the column titles), multiple rows in the 
body area (values for each sum-insured) and a single row in the foot 
area (the column totals).

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
table_definition(
/* Table      */        property_premiums( Property ),
/* Attributes */        [
        	          border      = 1,
        	          cellpadding = 4,
        	          cellspacing = 8
        	        ],
/* Head Rows  */        [
                          [
                            `Sum Insured`,
                            `Cover`,
                            `Premium`
                          ]
                        ],
/* Body Rows  */        BodyRows,
/* Foot Rows  */        [
                          [
                            ``,
                            money('$','s,x') @ TotalCover,
                            money('$','s,x') @ TotalPremium
                          ]
                        ]
                ) :-
	findall(
	         [
	           i @ verbatim @ InsuredName,
	           money('$','s,x') @ Cover,
	           money('$','s,x') @ Premium
	         ],
	         (
	           sum_insured( Insured, InsuredName ),
	           sum_insured_premium( Property, Insured,
	                                Cover, Premium )
	         ),
	         BodyRows
	       ),
	sumall(
	        Cover,
	        member( [_,_,_ @ Cover,_], BodyRows ),
	        TotalCover
	      ),
	sumall(
	        Premium,
	        member( [_,_,_,_ @ Premium], BodyRows ),
	        TotalPremium
	      ).
</PRE></FONT>

All monetary values are specified by HTML objects :-

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
        money(Symbol,Format) @ Value
</PRE></FONT>

where <I>Symbol</I> prefixes the value which is printed according to the
<I>Format</I>.
<P>

<BR><BR><BR><BR>
<A NAME="PG0207">
<H2>Pairwise Friendly Forms</H2>
</A NAME="PG0207">

In a ProWeb application it is possible for the SERVER to send 
to the CLIENT multiple forms all together in a single HTML page.
One method for controlling which forms are sent together is to declare 
them as being friendly with each other through clauses for the 
predicate <B>proweb_friends/2</B>.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
proweb_friends(
                property_address(      Property ),
                property_sums_insured( Property )
              ).

proweb_friends(
                property_perils(      Property ),
                property_protections( Property )
              ).
</PRE></FONT>

These declarations state that the forms :-
<UL><LI>property_address<LI>property_sums_insured</UL>
and the forms :-
<UL><LI>property_perils<LI>property_protections</UL>
for the same property will be sent together in pairs.
<P>

<BR><BR><BR><BR>
<A NAME="PG0208">
<H2>The Main Program</H2>
</A NAME="PG0208">

The main procedure of the application is the simple goal <B>underwrite</B>.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
% Underwrite all the properties selected by the client

property( 1, `1st` ).
property( 2, `2nd` ).
property( 3, `3rd` ).
property( 4, `4th` ).

underwrite :-
	forall(
	        (
	           property( Property, _Pth ),
	           proweb_returned_answer(
	                                   select_property(Property),
	                                   on
	                                 )
	        ),
	        underwrite_property( Property )
	      ).
</PRE></FONT>

Here we assume that the CLIENT has already selected properties from the 
list :-
<UL>
  <LI>1st
  <LI>2nd
  <LI>3rd
  <LI>4th
</UL>
The problem is now reduced to one of underwriting a single property.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
% Underwrite a single property for various sums insured

sum_insured( buildings, `Buildings` ).
sum_insured( machinery, `Machinery` ).
sum_insured( stock,     `Stock`     ).

underwrite_property( Property ) :-
	proweb_send_form( property_address(      Property ) ),
	proweb_send_form( property_sums_insured( Property ) ),
	proweb_send_form( property_perils(       Property ) ),
	proweb_send_form( property_protections(  Property ) ),
	proweb_returned_form( property_protections( Property ) ),
	forall(
	        sum_insured( Insured, _ ),
	        (
	           calculate_premium( Insured, Property, Premium ),
	           proweb_post_reply(
	                              insured_premium(Insured,Property),
	                              Premium
	                            )
	        )
	      ),
	proweb_send_form( property_premiums( Property ) ).
</PRE></FONT>

To underwrite a single property all the information required, such as 
its address, the sum-insured amounts, the perils to be insured against 
and the protection measures in place at the property are requested from 
the CLIENT. This is accomplished through successive calls to the ProWeb 
predicate <B>proweb_send_form/1</B>.
<P>
Note that before calculating, posting 
(<B>proweb_post_reply</B>) and then returning premiums 
a check is made to ensure all the information which was requested has 
indeed been returned. This is accomplished through a single call to the 
ProWeb predicate <B>proweb_returned_form/1</B>.
<P>
The problem is now further reduced to one of calculating a premium for a 
particular sum-insured for a single property.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
% Calculate the premium for a sum-insured

calculate_premium( Insured, Property, Premium ) :-
	proweb_returned_answer(
	                        sum_insured_amount(Insured,Property),
	                        Amount
	                      ),
	!,
	calculate_base_rate( Insured, Property, BaseRate ),
	BasePremium is Amount * (BaseRate / 100),
	calculate_additions(    Insured, Property, BasePremium,
	                        Additions    ),
	calculate_subtractions( Insured, Property, BasePremium,
	                        Subtractions ),
	Premium is BasePremium + Additions - Subtractions.

calculate_premium( _Insured, _Property, 0 ).
</PRE></FONT>

The premium for a sum-insured is based upon a precentage rate which is 
related to the post-code of the property.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
% Calculate the base-rate (%) for a sum-insured

calculate_base_rate( Insured, Property, BaseRate ) :-
	proweb_returned_answer(
	                        address_code(Property),
	                        AddressCode
	                      ),
	address_code_risk_category( AddressCode, RiskCategory ),
	risk_category_base_rate( Insured, RiskCategory, BaseRate ).

address_code_risk_category( 'CB1', a ).
address_code_risk_category( 'CB2', c ).
address_code_risk_category( 'CB3', c ).
address_code_risk_category( 'CB4', b ).
address_code_risk_category( 'CB5', c ).
	
risk_category_base_rate( buildings, _, 5.00 ).
risk_category_base_rate( machinery, a, 2.50 ).
risk_category_base_rate( machinery, b, 2.25 ).
risk_category_base_rate( machinery, c, 2.00 ).
risk_category_base_rate( stock,     a, 3.50 ).
risk_category_base_rate( stock,     b, 3.00 ).
risk_category_base_rate( stock,     c, 2.50 ).
</PRE></FONT>

As well as the base premium there will be additions for each peril 
which is to be insured against.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
% Calculate the additions according to the perils insured against

peril( accident,    `Accidental Damage`          ).
peril( burst_pipes, `Burst Pipes`                ).
peril( earthquake,  `Earthquake`                 ).
peril( explosion,   `Explosion`                  ).
peril( fire,        `Fire`                       ).
peril( riot,        `Riot or Malicous Damage`    ).
peril( storm,       `Storm or Tempest and Flood` ).
peril( subsidence,  `Subsidence`                 ).

calculate_additions( Insured, Property, BasePremium, Additions ) :-
	Question = peril(Peril,Property),
	sumall(
	         Addition,
	         (
	            peril( Peril, _ ),
	            proweb_returned_answer( Question, 'Yes' ),
	            addition_rate( Peril, Insured, Rate ),
	            Addition is BasePremium * (Rate / 100)
	         ),
	         Additions
	      ).

addition_rate( earthquake,  buildings,  1.00 ).
addition_rate( explosion,   buildings,  1.00 ).
addition_rate( fire,        buildings,  2.50 ).
addition_rate( storm,       buildings,  0.25 ).
addition_rate( subsidence,  buildings,  1.00 ).

addition_rate( accident,    machinery,  1.25 ).
addition_rate( explosion,   machinery,  1.00 ).
addition_rate( fire,        machinery,  2.50 ).
addition_rate( riot,        machinery,  0.25 ).

addition_rate( accident,    stock,      1.75 ).
addition_rate( burst_pipes, stock,      2.50 ).
addition_rate( explosion,   stock,      1.00 ).
addition_rate( fire,        stock,      2.50 ).
addition_rate( riot,        stock,      2.00 ).
</PRE></FONT>

Finally, for having the benefit of certain protection measures there 
will be some subtractions from the base premium.

<FONT FACE=courier COLOR=800000 SIZE=2><PRE>
% Calculate the subtractions according to the protections made

protection( fire_alarm,         `Automatic Fire Alarm` ).
protection( sprinkler,          `Automatic Sprinkler`  ).
protection( hose_reels,         `Hose Reels`           ).
protection( fire_extinguishers, `Fire Extinguishers`   ).
protection( intruder_alarm,     `Intruder Alarm`       ).

calculate_subtractions( Insured, Property, BasePremium, Subtractions ) :-
	Question = protection(Protection,Property),
	sumall(
	         Subtraction,
	         (
	            protection( Protection, _ ),
	            proweb_returned_answer( Question, 'Yes' ),
	            subtraction_rate( Protection, Insured, Property,
	                              Rate ),
	            Subtraction is BasePremium * (Rate / 100)
	         ),
	         Subtractions
	      ).

subtraction_rate( fire_alarm, _, Property, 0.50 ) :-
	proweb_returned_answer( peril(fire,Property), 'Yes' ).

subtraction_rate( sprinkler, _, Property, 0.50 ) :-
	proweb_returned_answer( peril(fire,Property), 'Yes' ).

subtraction_rate( hose_reels, _, Property, 0.25 ) :-
	proweb_returned_answer( peril(fire,Property), 'Yes' ).

subtraction_rate( fire_extinguishers, _, Property, 0.25 ) :-
	proweb_returned_answer( peril(fire,Property), 'Yes' ).

subtraction_rate( intruder_alarm, machinery, Property, 0.75 ) :-
	proweb_returned_answer( peril(riot,Property), 'Yes' ).

subtraction_rate( intruder_alarm, stock, Property, 1.25 ) :-
	proweb_returned_answer( peril(riot,Property), 'Yes' ).
</PRE></FONT>

<P>

</TD></TABLE><IMG SRC="lpa_logo.gif">
</BODY>
</HTML>
