METUTL

%   Author : R.A.O'Keefe
%   Purpose: various meta-logical operations 

________________________________________________________________________

occurs_check/2

	occurs_check(Term, Var) is equivalent to \+ occurs_chk(Term, Var)

________________________________________________________________________

occurs_in/2

	occurs_in(Var, Term) is equivalent to LPA occurs_chk(Term,Var)

________________________________________________________________________

subsumes/2

check or build a subsumption relation between two terms

	subsumes(General, Specific)

	+General	<term>
	+Specific	<term>

	subsumes(General, Specific) is true if there exists a
	substitution that transforms General into Specific, i.e., if
	Specific is a specific instance of General.

	subsumes(General, Specific) bind variables in General.

	Examples

		?- subsumes(foo(X,b,Z), foo(a,b,c)).
		X = a ,
		Z = c

		?- subsumes(foo(X,B,Z), foo(A,b,c)).
		X= A = _ ,
		B = b ,
		Z = c

		?- subsumes(foo(X,b,Z), foo(a,B,c)).
		no

________________________________________________________________________

subterm/2

enumerate the subterms of a term

	subterm(SubTerm, Term)

	?SubTerm	<term> or <variable>
	+Term		<term>

	subterm(SubTerm, Term) succeeds if SubTerm is a subterm of
	Term (including  SubTerm = Term).  This predicate can be used
	to generate all subterms of a term.

	Example

		| ?- subterm(S, foo(a(c), b, [c,d])).
		S = foo(a(c),b,[c,d]) ;

		S = [c,d] ;

		S = [d] ;

		S = [] ;

		S = d ;

		S = c ;

		S = b ;

		S = a(c) ;

		S = c ;

		no

________________________________________________________________________

unify/2

unify two terms with occurs check

	unify(Term1, Term2)

	?Term1		<term>
	?Term2		<term>

	unify(Term1, Term2) unifies Term1 and Term2 with occurs
	check. 

	Examples

		?- unify(X,X).
		X = _

		?- unify(X, f(X)).
		no

		?- unify(f(X), X).
		no

		?- unify(f(X), f(Y)).
		X = Y = _

		?- unify(a(U,V,d), a(c,e,F)).
		U = c ,
		V = e ,
		F = d

________________________________________________________________________

variables_of/2

return the list of variables in a term

	variable_of(Term, Vars)

	+Term		<term>
	-Vars		<variable>

	variable_of(Term, Vars) is true when Vars is the list of free
	variables occurring in Term.

	Examples

		?- variables_of(X, V).
		X = _ ,
		V = [X]

		?- variables_of(foo(One, Two, Three), V).
		One = _ ,
		Two = _ ,
		Three = _ ,
		V = [One,Two,Three]

		?- variables_of(foo(1,2,3), V).
		V = []


________________________________________________________________________

variant/2

check whether two terms are variant of each other

	variant(Term1, Term2)

	+Term1		<term>
	+Term2		<term>

	variant(Term1, Term2) is true when Term1 and Term2 subsumes
	each other.

	Examples

		?- variant(a(X,Y), a(U,V)).
		X = _ ,
		Y = _ ,
		U = _ ,
		V = _

		?- variant(a(x,Y), a(U,v)).
		no

________________________________________________________________________

var_member_chk/2

deterministically determines whether a variable occurs in a list
without instantiating


	var_member_chk(Var, List)

	+Var		<variable>
	+List		<list>

	var_member_chk(Var, List) is true if Var occurs in List.


	Examples

		?- var_member_chk(X, [U,V,X,W]).
		X = _ ,
		U = _ ,
		V = _ ,
		W = _

		?- var_member_chk(X, [U,V,a,W]).
		no

